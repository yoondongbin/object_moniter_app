name: iOS Build (iOS 15.1+)

on:
  workflow_dispatch:

jobs:
  ios-build:
    # ✅ 안정적인 macos-14로 변경 (Xcode 15.x + iOS 17.x 런타임 보유)
    runs-on: macos-14

    env:
      APP_WORKSPACE: ios/mobile.xcworkspace
      APP_SCHEME: mobile
      DERIVED_DATA: mobile/ios/build
      IOS_MIN_TARGET: "15.1"
      PREFERRED_DEVICE_1: "iPhone 15"
      PREFERRED_DEVICE_2: "iPhone 14"
      PREFERRED_DEVICE_3: "iPhone 13"
      # ✅ macos-14에 실제 존재하는 런타임으로 변경
      PREFERRED_RUNTIME_1: "iOS 17.5"
      PREFERRED_RUNTIME_2: "iOS 17.4"

    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🔧 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: mobile/yarn.lock

      - name: 📦 의존성 설치
        working-directory: mobile
        run: yarn install --frozen-lockfile

      - name: ⚙️ 환경 설정(.env 생성)
        working-directory: mobile
        run: |
          set -euo pipefail
          echo "APP_ENV=staging" > .env
          echo "API_BASE_URL=https://api.example.com" >> .env
          echo "TIMEOUT=15000" >> .env
          echo "DEBUG_MODE=true" >> .env
          echo "📄 생성된 .env 내용 ↓"
          cat .env

      - name: 🧹 iOS 캐시 완전 정리
        working-directory: mobile
        run: |
          set -euo pipefail
          echo "🗑️ 기존 빌드/파드/파생 데이터 삭제"
          rm -rf ios/build ios/Pods ios/Podfile.lock
          rm -rf ~/Library/Caches/CocoaPods ~/Library/Developer/Xcode/DerivedData
          echo "✅ 캐시 정리 완료"

      - name: 🍎 CocoaPods 설치/동기화
        working-directory: mobile/ios
        run: |
          set -euo pipefail
          echo "📦 CocoaPods 버전 확인:"
          pod --version
          echo "🔄 pod install 실행"
          pod install --repo-update --clean-install --verbose

      - name: 🧩 Xcode/런타임 점검
        run: |
          set -euo pipefail
          echo "🔎 Xcode 경로: $(xcode-select -p)"
          xcodebuild -version
          echo "📚 설치된 런타임 목록:"
          xcrun simctl list runtimes
          echo "📱 사용가능 디바이스(available):"
          xcrun simctl list devices available

      # ✅ 더 간단하고 안정적인 방식으로 변경
      - name: 🧪 iOS 시뮬레이터 생성 및 부팅 (수정된 런타임 ID)
        id: boot-sim
        run: |
          set -euo pipefail

          echo "📋 사용 가능한 런타임 확인:"
          xcrun simctl list runtimes

          # ✅ 올바른 런타임 ID 추출 (com.apple.CoreSimulator.SimRuntime.iOS-17-0 형식)
          RUNTIME_ID=$(xcrun simctl list runtimes | grep "iOS" | head -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime\.iOS-[0-9-]*')
          
          if [ -z "${RUNTIME_ID:-}" ]; then
            echo "❌ 사용할 iOS 런타임을 찾지 못했습니다."
            echo "📋 사용 가능한 런타임 목록:"
            xcrun simctl list runtimes
            exit 1
          fi
          echo "✅ 선택된 런타임 ID: ${RUNTIME_ID}"

          # iPhone 15 또는 사용 가능한 첫 번째 iPhone 선택
          DEVICE_TYPE="iPhone 15"
          if ! xcrun simctl list devicetypes | grep -q "iPhone 15"; then
            DEVICE_TYPE=$(xcrun simctl list devicetypes | grep "iPhone" | head -1 | awk -F ' \\(' '{print $1}')
          fi
          echo "✅ 선택된 디바이스: ${DEVICE_TYPE}"

          # 시뮬레이터 생성 및 부팅
          echo "🔨 시뮬레이터 생성 중..."
          UDID=$(xcrun simctl create "CI-iOS-Build" "$DEVICE_TYPE" "$RUNTIME_ID")
          echo "🆔 생성된 UDID: $UDID"

          echo "🚀 시뮬레이터 부팅 중..."
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b

          echo "SIMULATOR_UDID=$UDID" >> $GITHUB_ENV

      - name: 🧴 xcpretty 설치(옵션)
        run: |
          set -euo pipefail
          sudo gem install xcpretty || true

      - name: 🏗️ iOS 빌드 (Release, Simulator)
        working-directory: mobile
        run: |
          set -euo pipefail
          echo "🔨 빌드 시작…"
          xcodebuild \
            -workspace "$APP_WORKSPACE" \
            -scheme "$APP_SCHEME" \
            -configuration Release \
            -sdk iphonesimulator \
            -derivedDataPath "$DERIVED_DATA" \
            -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
            IPHONEOS_DEPLOYMENT_TARGET="$IOS_MIN_TARGET" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            clean build | xcpretty || true

      - name: 📦 빌드 결과 확인
        working-directory: mobile
        run: |
          set -euo pipefail
          echo "📂 .app 검색:"
          APP_PATH=$(find "$DERIVED_DATA/Build/Products" -type d -name "*.app" | head -1 || true)
          if [ -n "${APP_PATH:-}" ] && [ -d "$APP_PATH" ]; then
            echo "✅ iOS 빌드 성공"
            echo "APP_PATH: $APP_PATH"
            du -sh "$APP_PATH" || true
            ls -la "$APP_PATH" | head -20 || true
            if [ -f "$APP_PATH/Info.plist" ]; then
              echo "📋 MinimumOSVersion:"
              /usr/libexec/PlistBuddy -c 'Print :MinimumOSVersion' "$APP_PATH/Info.plist" || echo "N/A"
            fi
          else
            echo "❌ .app을 찾지 못했습니다. 위 빌드 로그를 확인하세요."
            echo "📂 Products 디렉터리 구조:"
            find "$DERIVED_DATA/Build/Products" -maxdepth 3 -type d -print || true
            exit 1
          fi

      - name: ⬆️ 빌드 아티팩트 업로드 (선택)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-release-${{ github.run_number }}
          path: mobile/ios/build/Build/Products/**/*.app
          retention-days: 7

      - name: 🧽 시뮬레이터 정리
        if: always()
        run: |
          set -euo pipefail
          if [ -n "${SIMULATOR_UDID:-}" ]; then
            echo "🧹 시뮬레이터 삭제: $SIMULATOR_UDID"
            xcrun simctl shutdown "$SIMULATOR_UDID" || true
            xcrun simctl delete "$SIMULATOR_UDID" || true
          fi
