---
alwaysApply: true
description: Object Monitor 프로젝트 구조 및 아키텍처 가이드
---

# Object Monitor 프로젝트 구조 가이드

## 📁 프로젝트 개요
Object Monitor는 AI 기반 객체 탐지 및 모니터링 시스템입니다.
- **백엔드**: Flask + MySQL + YOLOv8 AI 모델
- **모바일**: React Native (Android/iOS)
- **배포**: Docker + Jenkins CI/CD

## 🏗️ 전체 프로젝트 구조

### 백엔드 (Flask API)
- 진입점: [back_end/app.py](mdc:back_end/app.py)
- 설정: [back_end/config.py](mdc:back_end/config.py)
- 라우트: [back_end/routes.py](mdc:back_end/routes.py)
- 모델: [back_end/models.py](mdc:back_end/models.py)
- AI 탐지: [back_end/detection_service.py](mdc:back_end/detection_service.py)

### 모바일 앱 (React Native)
- 진입점: [mobile/App.tsx](mdc:mobile/App.tsx)
- 패키지 설정: [mobile/package.json](mdc:mobile/package.json)
- 네비게이션: [mobile/src/navigation/AppNavigator.tsx](mdc:mobile/src/navigation/AppNavigator.tsx)
- API 설정: [mobile/src/config/apiConfig.ts](mdc:mobile/src/config/apiConfig.ts)
- 타입 정의: [mobile/src/types/api.ts](mdc:mobile/src/types/api.ts)

### CI/CD 및 배포
- Jenkins 파이프라인: [Jenkinsfile](mdc:Jenkinsfile)
- Docker 설정: [docker-compose.yml](mdc:docker-compose.yml), [docker-compose.prod.yml](mdc:docker-compose.prod.yml)
- 배포 스크립트: [deploy.sh](mdc:deploy.sh)

## 🔧 개발 환경 설정

### 환경별 구성
- **Development**: 로컬 개발 (디버그 모드, Flipper 활성화)
- **Staging**: 테스트 환경 (릴리스 모드, 스테이징 API)
- **Production**: 프로덕션 환경 (최적화, 프로덕션 API)

### 환경 변수 관리
모바일 앱은 `react-native-config`를 사용하여 환경별 설정을 관리합니다:
- `.env.development`
- `.env.staging` 
- `.env.production`

## 📱 모바일 앱 아키텍처

### 주요 디렉토리
- `src/screens/`: 화면 컴포넌트
- `src/components/`: 재사용 가능한 UI 컴포넌트
- `src/services/api/`: API 통신 서비스
- `src/utils/`: 유틸리티 함수
- `src/styles/`: 스타일 정의
- `src/types/`: TypeScript 타입 정의

### API 통신 패턴
모든 API 호출은 [mobile/src/utils/axiosInstance.ts](mdc:mobile/src/utils/axiosInstance.ts)를 통해 이루어지며, JWT 토큰 자동 관리 및 에러 처리가 포함됩니다.

## 🚀 빌드 및 배포

### 모바일 앱 빌드 스크립트
- Android 개발: `yarn android:dev`
- Android 스테이징: `yarn android:staging` 
- Android 프로덕션: `yarn android:prod`
- iOS 개발: `yarn ios:dev`
- iOS 스테이징: `yarn ios:staging`
- iOS 프로덕션: `yarn ios:prod`

### CI/CD 파이프라인
Jenkins를 통한 자동화된 빌드 및 배포:
1. 소스코드 체크아웃
2. 환경별 설정 적용
3. 백엔드 Docker 이미지 빌드
4. Android APK 빌드
5. iOS 앱 빌드
6. 아티팩트 저장 및 배포

## 🔐 보안 및 인증
- JWT 기반 인증 시스템
- 토큰 자동 갱신
- 환경별 API 엔드포인트 분리
- 키스토어 및 인증서 관리