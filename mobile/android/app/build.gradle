apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
// react-native-config에서 .env 값을 안드로이드에 주입
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

// 빌드 타입별 사용할 .env 파일 지정 (우리는 스크립트에서 .env를 갈아끼우므로 release는 .env 사용)
project.ext.envConfigFiles = [
    debug: ".env.development",
    release: ".env"
]

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.mobile"
    defaultConfig {
        applicationId "com.mobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // 키스토어 파일과 비밀번호가 모두 있는 경우에만 사용
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE') && 
                project.hasProperty('MYAPP_UPLOAD_STORE_PASSWORD') &&
                file(MYAPP_UPLOAD_STORE_FILE).exists()) {
                
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
                
                println "✅ 프로덕션 키스토어 사용: ${MYAPP_UPLOAD_STORE_FILE}"
            } else {
                // 키스토어가 없으면 debug 키스토어 사용 (로컬 개발용)
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
                
                println "⚠️ Debug 키스토어 사용 (로컬 개발)"
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// New Architecture: codegen 출력물이 CMake 전에 생성되도록 태스크 의존성 추가
afterEvaluate {
    def codegenDeps = [
        ":react-native-async-storage_async-storage:generateCodegenSchemaFromJavaScript",
        ":react-native-async-storage_async-storage:generateCodegenArtifactsFromSchema",
        ":react-native-gesture-handler:generateCodegenSchemaFromJavaScript",
        ":react-native-gesture-handler:generateCodegenArtifactsFromSchema",
        ":react-native-image-picker:generateCodegenSchemaFromJavaScript",
        ":react-native-image-picker:generateCodegenArtifactsFromSchema",
        ":react-native-pager-view:generateCodegenSchemaFromJavaScript",
        ":react-native-pager-view:generateCodegenArtifactsFromSchema",
        ":react-native-picker_picker:generateCodegenSchemaFromJavaScript",
        ":react-native-picker_picker:generateCodegenArtifactsFromSchema",
        ":react-native-safe-area-context:generateCodegenSchemaFromJavaScript",
        ":react-native-safe-area-context:generateCodegenArtifactsFromSchema",
        ":react-native-screens:generateCodegenSchemaFromJavaScript",
        ":react-native-screens:generateCodegenArtifactsFromSchema",
        ":react-native-svg:generateCodegenSchemaFromJavaScript",
        ":react-native-svg:generateCodegenArtifactsFromSchema",
        ":react-native-vector-icons:generateCodegenSchemaFromJavaScript",
        ":react-native-vector-icons:generateCodegenArtifactsFromSchema",
        ":react-native-reanimated:generateCodegenSchemaFromJavaScript",
        ":react-native-reanimated:generateCodegenArtifactsFromSchema",
        ":react-native-worklets:generateCodegenSchemaFromJavaScript",
        ":react-native-worklets:generateCodegenArtifactsFromSchema"
    ]

    tasks.matching { it.name.startsWith("configureCMake") || it.name.startsWith("buildCMake") }.configureEach {
        dependsOn(codegenDeps.findAll { tasks.findByPath(it) != null })
    }
}
